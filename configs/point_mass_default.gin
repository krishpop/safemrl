import safemrl.envs.point_mass
import safemrl.utils.metrics
import safemrl.utils.misc
import safemrl.algos.agents
import safemrl.trainer
import safemrl.utils.safe_dynamic_episode_driver
import tf_agents.networks.actor_distribution_network

ENV_STR = 'DrunkSpiderShort'
ENV_LOAD_FN= @point_mass.env_load_fn
EP_LEN = 50
ENV_WRAPPERS = []
NUM_STEPS = 500000

TRAIN_METRICS = [
    @metrics.AverageSuccessMetric(),
    @metrics.AverageFallenMetric()
]

EVAL_METRICS = [
    @eval_success/metrics.AverageSuccessMetric(),
    @eval_fallen/metrics.AverageFallenMetric()
]
eval_success/metrics.AverageSuccessMetric.batch_size = %NUM_ENVS
eval_fallen/metrics.AverageFallenMetric.batch_size = %NUM_ENVS

ENV_METRIC_FACTORIES = []

point_mass.env_load_fn.max_episode_steps = %EP_LEN
metrics.AverageSuccessMetric.buffer_size = 30
metrics.AverageSuccessMetric.buffer_size = 30

point_mass.PointMassAcScaleEnv.domain_rand = True
point_mass.PointMassAcNoiseEnv.domain_rand = True

actor_distribution_network.ActorDistributionNetwork.preprocessing_combiner = (
    @misc.extract_observation_layer()
)
agents.CriticNetwork.preprocessing_combiner = (
    @misc.extract_obs_merge_w_ac_layer()
)